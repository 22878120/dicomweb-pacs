{"version":3,"sources":["webpack:///D:/dev/web/Viewers/extensions/measurement-tracking/src/viewports/ViewportOverlay.js","webpack:///D:/dev/web/Viewers/extensions/measurement-tracking/src/viewports/ViewportLoadingIndicator.js","webpack:///D:/dev/web/Viewers/extensions/measurement-tracking/src/viewports/TrackedCornerstoneViewport.js"],"names":["ViewportOverlay","imageId","scale","windowWidth","windowCenter","imageIndex","stackSize","activeTools","overlay","isZoomActive","includes","isWwwcActive","instanceNumber","cornerstone","metaData","get","className","classnames","toFixed","propTypes","PropTypes","number","isRequired","string","arrayOf","defaultProps","ViewportLoadingIndicator","error","message","percentComplete","object","formatDate","utils","ArrowAnnotateTool","cornerstoneTools","BidirectionalTool","EllipticalRoiTool","LengthTool","BaseAnnotationTool","importInternal","StackManager","OHIF","TrackedCornerstoneViewport","children","dataSource","displaySet","viewportIndex","servicesManager","services","ToolBarService","DisplaySetService","trackedMeasurements","useTrackedMeasurements","useViewportGrid","activeViewportIndex","viewports","viewportGridService","useViewportDialog","viewportDialogState","useState","viewportData","setViewportData","element","setElement","isTracked","setIsTracked","trackedMeasurementId","setTrackedMeasurementId","useEffect","clearStacks","store","state","tools","filter","tool","forEach","configuration","renderDashed","getEnabledElement","image","updateImage","StudyInstanceUID","displaySetInstanceUID","sopClassUids","length","console","warn","_getViewportData","then","childrenWithProps","stack","imageIds","currentImageIdIndex","map","child","index","React","cloneElement","key","firstViewportIndexWithMatchingDisplaySetUid","findIndex","vp","trackedSeries","context","Modality","SeriesDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","images","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","PixelSpacing","ManufacturerModelName","label","_viewportLabels","showNavArrows","onDoubleClick","evt","stopPropagation","preventDefault","onSeriesChange","direction","newTrackedMeasurementId","measurements","MeasurementService","getMeasurements","filteredMeasurements","m","referenceSeriesUID","measurementCount","ids","fm","id","measurementIndex","_getNextMeasurementId","measurement","SOPInstanceUID","getActiveDisplaySets","find","ds","_getViewportDataFromTrackedMeasurementId","setDisplaysetForViewport","switchMeasurement","studyData","isLocked","studyDate","currentSeries","seriesDescription","modality","patientInformation","patientName","formatPN","Alphabetic","patientSex","patientAge","MRN","thickness","spacing","scanner","onElementEnabled","targetElement","detail","OHIFCornerstoneEnabledElementEvent","CustomEvent","enabledElement","document","dispatchEvent","imageIdIndex","onNewImageDebounceTime","onNewImageDebounced","resizeRefreshRateMs","isActive","isStackPrefetchEnabled","isPlaying","frameRate","isOverlayVisible","loadingIndicatorComponent","viewportOverlayComponent","props","getActiveTools","type","actions","onSubmit","onOutsideClick","node","customProps","_getCornerstoneStack","storedStack","findOrCreateStack","Object","assign"],"mappings":"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","file":"4.bundle.12d25f570ff8a08b8d43.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cornerstone from 'cornerstone-core';\r\nimport classnames from 'classnames';\r\n\r\nconst ViewportOverlay = ({\r\n  imageId,\r\n  scale,\r\n  windowWidth,\r\n  windowCenter,\r\n  imageIndex,\r\n  stackSize,\r\n  activeTools\r\n}) => {\r\n  const topLeft = 'top-viewport left-viewport';\r\n  const topRight = 'top-viewport right-viewport-scrollbar';\r\n  const bottomRight = 'bottom-viewport right-viewport-scrollbar';\r\n  const bottomLeft = 'bottom-viewport left-viewport';\r\n  const overlay = 'absolute pointer-events-none';\r\n\r\n  const isZoomActive = activeTools.includes('Zoom');\r\n  const isWwwcActive = activeTools.includes('Wwwc');\r\n\r\n  if (!imageId) {\r\n    return null;\r\n  }\r\n\r\n  const generalImageModule = cornerstone.metaData.get('generalImageModule', imageId) || {};\r\n  const { instanceNumber } = generalImageModule;\r\n\r\n  return (\r\n    <div className=\"text-primary-light\">\r\n      <div className={classnames(overlay, topLeft)}>\r\n        {isZoomActive && (\r\n          <div className=\"flex flex-row\">\r\n            <span className=\"mr-1\">Zoom:</span>\r\n            <span className=\"font-thin\">{scale.toFixed(2)}x</span>\r\n          </div>\r\n        )}\r\n        {isWwwcActive && (\r\n          <div className=\"flex flex-row\">\r\n            <span className=\"mr-1\">W:</span>\r\n            <span className=\"ml-1 mr-2 font-thin\">{windowWidth.toFixed(0)}</span>\r\n            <span className=\"mr-1\">L:</span>\r\n            <span className=\"ml-1 font-thin\">{windowCenter.toFixed(0)}</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className={classnames(overlay, topRight)}>\r\n        {stackSize > 1 && (\r\n          <div className=\"flex flex-row\">\r\n            <span className=\"mr-1\">I:</span>\r\n            <span className=\"font-thin\">\r\n              {`${instanceNumber} ${imageIndex}/${stackSize}`}\r\n            </span>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className={classnames(overlay, bottomRight)}></div>\r\n      <div className={classnames(overlay, bottomLeft)}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nViewportOverlay.propTypes = {\r\n  scale: PropTypes.number.isRequired,\r\n  windowWidth: PropTypes.number.isRequired,\r\n  windowCenter: PropTypes.number.isRequired,\r\n  imageId: PropTypes.string.isRequired,\r\n  imageIndex: PropTypes.number.isRequired,\r\n  stackSize: PropTypes.number.isRequired,\r\n  activeTools: PropTypes.arrayOf(PropTypes.string)\r\n};\r\n\r\nViewportOverlay.defaultProps = {\r\n  activeTools: []\r\n};\r\n\r\nexport default ViewportOverlay;\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ViewportLoadingIndicator = ({ error }) => {\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <div className=\"bg-black h-full w-full absolute opacity-50\"></div>\r\n        <div className=\"text-primary-light text-xl font-thin\">\r\n          <h4>Error Loading Image</h4>\r\n          <p>An error has occurred.</p>\r\n          <p>{error.message}</p>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"bg-black h-full w-full absolute opacity-50\"></div>\r\n      <div className=\"absolute transparent w-full h-full flex items-center justify-center\">\r\n        <p className=\"text-primary-light text-xl font-thin\">\r\n          Loading...\r\n      </p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nViewportLoadingIndicator.propTypes = {\r\n  percentComplete: PropTypes.number,\r\n  error: PropTypes.object,\r\n};\r\n\r\nViewportLoadingIndicator.defaultProps = {\r\n  percentComplete: 0,\r\n  error: null,\r\n};\r\n\r\nexport default ViewportLoadingIndicator;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cornerstone from 'cornerstone-core';\r\nimport cornerstoneTools from 'cornerstone-tools';\r\nimport CornerstoneViewport from 'react-cornerstone-viewport';\r\nimport OHIF, { utils } from '@ohif/core';\r\nimport {\r\n  Notification,\r\n  ViewportActionBar,\r\n  useViewportGrid,\r\n  useViewportDialog,\r\n} from '@ohif/ui';\r\nimport { useTrackedMeasurements } from './../getContextModule';\r\n\r\nimport ViewportOverlay from './ViewportOverlay';\r\nimport ViewportLoadingIndicator from './ViewportLoadingIndicator';\r\n\r\nconst { formatDate } = utils;\r\n\r\n// TODO -> Get this list from the list of tracked measurements.\r\n// TODO -> We can now get a list of tool names from the measurement service.\r\n// Use the toolnames to check which tools we have instead, using the\r\n// Classes isn't really extensible unless we add the classes to the measurement\r\n// Service definition, which feels wrong.\r\nconst {\r\n  ArrowAnnotateTool,\r\n  BidirectionalTool,\r\n  EllipticalRoiTool,\r\n  LengthTool,\r\n} = cornerstoneTools;\r\n\r\nconst BaseAnnotationTool = cornerstoneTools.importInternal(\r\n  'base/BaseAnnotationTool'\r\n);\r\n\r\n// const cine = viewportSpecificData.cine;\r\n// isPlaying = cine.isPlaying === true;\r\n// frameRate = cine.cineFrameRate || frameRate;\r\n\r\nconst { StackManager } = OHIF.utils;\r\n\r\nfunction TrackedCornerstoneViewport({\r\n  children,\r\n  dataSource,\r\n  displaySet,\r\n  viewportIndex,\r\n  servicesManager,\r\n}) {\r\n  const { ToolBarService, DisplaySetService } = servicesManager.services;\r\n  const [trackedMeasurements] = useTrackedMeasurements();\r\n  const [\r\n    { activeViewportIndex, viewports },\r\n    viewportGridService,\r\n  ] = useViewportGrid();\r\n  // viewportIndex, onSubmit\r\n  const [viewportDialogState, viewportDialogApi] = useViewportDialog();\r\n  const [viewportData, setViewportData] = useState(null);\r\n  const [element, setElement] = useState(null);\r\n\r\n  const [isTracked, setIsTracked] = useState(false);\r\n  const [trackedMeasurementId, setTrackedMeasurementId] = useState(null);\r\n\r\n  // TODO: Still needed? Better way than import `OHIF` and destructure?\r\n  // Why is this managed by `core`?\r\n  useEffect(() => {\r\n    return () => {\r\n      StackManager.clearStacks();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!element) {\r\n      return;\r\n    }\r\n    const allTools = cornerstoneTools.store.state.tools;\r\n    const toolsForElement = allTools.filter(tool => tool.element === element);\r\n\r\n    toolsForElement.forEach(tool => {\r\n      if (\r\n        tool instanceof ArrowAnnotateTool ||\r\n        tool instanceof BidirectionalTool ||\r\n        tool instanceof EllipticalRoiTool ||\r\n        tool instanceof LengthTool\r\n      ) {\r\n        const configuration = tool.configuration;\r\n\r\n        configuration.renderDashed = !isTracked;\r\n\r\n        tool.configuration = configuration;\r\n      }\r\n    });\r\n\r\n    const enabledElement = cornerstone.getEnabledElement(element);\r\n\r\n    if (enabledElement.image) {\r\n      cornerstone.updateImage(element);\r\n    }\r\n  }, [isTracked]);\r\n\r\n  const onElementEnabled = evt => {\r\n    const eventData = evt.detail;\r\n    const targetElement = eventData.element;\r\n\r\n    const allTools = cornerstoneTools.store.state.tools;\r\n\r\n    const toolsForElement = allTools.filter(\r\n      tool => tool.element === targetElement\r\n    );\r\n\r\n    toolsForElement.forEach(tool => {\r\n      if (\r\n        tool instanceof ArrowAnnotateTool ||\r\n        tool instanceof BidirectionalTool ||\r\n        tool instanceof EllipticalRoiTool ||\r\n        tool instanceof LengthTool\r\n      ) {\r\n        const configuration = tool.configuration;\r\n\r\n        configuration.renderDashed = !isTracked;\r\n\r\n        tool.configuration = configuration;\r\n      } else if (tool instanceof BaseAnnotationTool) {\r\n        const configuration = tool.configuration;\r\n\r\n        configuration.renderDashed = true;\r\n\r\n        tool.configuration = configuration;\r\n      }\r\n    });\r\n\r\n    const enabledElement = cornerstone.getEnabledElement(targetElement);\r\n\r\n    if (enabledElement.image) {\r\n      cornerstone.updateImage(targetElement);\r\n    }\r\n\r\n    setElement(targetElement);\r\n\r\n    const OHIFCornerstoneEnabledElementEvent = new CustomEvent(\r\n      'ohif-cornerstone-enabled-element-event',\r\n      {\r\n        detail: {\r\n          enabledElement: targetElement,\r\n          viewportIndex,\r\n        },\r\n      }\r\n    );\r\n\r\n    document.dispatchEvent(OHIFCornerstoneEnabledElementEvent);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const {\r\n      StudyInstanceUID,\r\n      displaySetInstanceUID,\r\n      sopClassUids,\r\n    } = displaySet;\r\n\r\n    if (!StudyInstanceUID || !displaySetInstanceUID) {\r\n      return;\r\n    }\r\n\r\n    if (sopClassUids && sopClassUids.length > 1) {\r\n      console.warn(\r\n        'More than one SOPClassUID in the same series is not yet supported.'\r\n      );\r\n    }\r\n\r\n    /*\r\n     * This grabs `imageIndex from first matching\r\n     * We actually want whichever is at our `viewportIndex`\r\n     */\r\n    const { imageIndex } = viewports[viewportIndex];\r\n    displaySet.imageIndex = imageIndex;\r\n\r\n    _getViewportData(dataSource, displaySet).then(setViewportData);\r\n  }, [dataSource, displaySet, viewports, viewportIndex]);\r\n\r\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  let childrenWithProps = null;\r\n\r\n  if (!viewportData) {\r\n    return null;\r\n  }\r\n\r\n  const {\r\n    imageIds,\r\n    currentImageIdIndex,\r\n    // If this comes from the instance, would be a better default\r\n    // `FrameTime` in the instance\r\n    // frameRate = 0,\r\n  } = viewportData.stack;\r\n\r\n  // TODO: Does it make more sense to use Context?\r\n  if (children && children.length) {\r\n    childrenWithProps = children.map((child, index) => {\r\n      return (\r\n        child &&\r\n        React.cloneElement(child, {\r\n          viewportIndex,\r\n          key: index,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  // We have...\r\n  // StudyInstanceUid, DisplaySetInstanceUid\r\n  // Use displaySetInstanceUid --> SeriesInstanceUid\r\n  // Get meta for series, map to actionBar\r\n  // const displaySet = DisplaySetService.getDisplaySetByUID(\r\n  //   dSet.displaySetInstanceUID\r\n  // );\r\n  // TODO: This display contains the meta for all instances.\r\n  // That can't be right...\r\n  // console.log('DISPLAYSET', displaySet);\r\n  // const seriesMeta = DicomMetadataStore.getSeries(this.props.displaySet.StudyInstanceUID, '');\r\n  // console.log(seriesMeta);\r\n\r\n  // TODO: Share this logic so it isn't out of sync where we retrieve\r\n  const firstViewportIndexWithMatchingDisplaySetUid = viewports.findIndex(\r\n    vp => vp.displaySetInstanceUID === displaySet.displaySetInstanceUID\r\n  );\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n\r\n  const {\r\n    Modality,\r\n    SeriesDate,\r\n    SeriesDescription,\r\n    SeriesInstanceUID,\r\n    SeriesNumber,\r\n  } = displaySet;\r\n\r\n  const {\r\n    PatientID,\r\n    PatientName,\r\n    PatientSex,\r\n    PatientAge,\r\n    SliceThickness,\r\n    PixelSpacing,\r\n    ManufacturerModelName,\r\n  } = displaySet.images[0];\r\n\r\n  if (trackedSeries.includes(SeriesInstanceUID) !== isTracked) {\r\n    setIsTracked(!isTracked);\r\n  }\r\n\r\n  const label =\r\n    viewports.length > 1\r\n      ? _viewportLabels[firstViewportIndexWithMatchingDisplaySetUid]\r\n      : '';\r\n\r\n  function switchMeasurement(direction) {\r\n    if (!element) {\r\n      // Element not yet enabled.\r\n      return;\r\n    }\r\n\r\n    const newTrackedMeasurementId = _getNextMeasurementId(\r\n      direction,\r\n      servicesManager,\r\n      trackedMeasurementId,\r\n      trackedMeasurements\r\n    );\r\n\r\n    if (!newTrackedMeasurementId) {\r\n      return;\r\n    }\r\n\r\n    setTrackedMeasurementId(newTrackedMeasurementId);\r\n\r\n    const { MeasurementService } = servicesManager.services;\r\n    const measurements = MeasurementService.getMeasurements();\r\n    const measurement = measurements.find(\r\n      m => m.id === newTrackedMeasurementId\r\n    );\r\n\r\n    const {\r\n      displaySetInstanceUID,\r\n      imageIndex,\r\n    } = _getViewportDataFromTrackedMeasurementId(\r\n      measurement,\r\n      DisplaySetService\r\n    );\r\n\r\n    viewportGridService.setDisplaysetForViewport({\r\n      viewportIndex,\r\n      displaySetInstanceUID,\r\n      imageIndex,\r\n    });\r\n  }\r\n\r\n  const showNavArrows = isTracked && viewportIndex === activeViewportIndex;\r\n\r\n  // TODO -> disabled double click for now: onDoubleClick={_onDoubleClick}\r\n\r\n  return (\r\n    <>\r\n      <ViewportActionBar\r\n        onDoubleClick={evt => {\r\n          evt.stopPropagation();\r\n          evt.preventDefault();\r\n        }}\r\n        onSeriesChange={direction => switchMeasurement(direction)}\r\n        showNavArrows={showNavArrows}\r\n        studyData={{\r\n          label,\r\n          isTracked,\r\n          isLocked: false,\r\n          studyDate: formatDate(SeriesDate), // TODO: This is series date. Is that ok?\r\n          currentSeries: SeriesNumber,\r\n          seriesDescription: SeriesDescription,\r\n          modality: Modality,\r\n          patientInformation: {\r\n            patientName: PatientName\r\n              ? OHIF.utils.formatPN(PatientName.Alphabetic)\r\n              : '',\r\n            patientSex: PatientSex || '',\r\n            patientAge: PatientAge || '',\r\n            MRN: PatientID || '',\r\n            thickness: SliceThickness ? `${SliceThickness.toFixed(2)}mm` : '',\r\n            spacing:\r\n              PixelSpacing && PixelSpacing.length\r\n                ? `${PixelSpacing[0].toFixed(2)}mm x ${PixelSpacing[1].toFixed(\r\n                    2\r\n                  )}mm`\r\n                : '',\r\n            scanner: ManufacturerModelName || '',\r\n          },\r\n        }}\r\n      />\r\n      {/* TODO: Viewport interface to accept stack or layers of content like this? */}\r\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\r\n        <CornerstoneViewport\r\n          onElementEnabled={onElementEnabled}\r\n          viewportIndex={viewportIndex}\r\n          imageIds={imageIds}\r\n          imageIdIndex={currentImageIdIndex}\r\n          onNewImageDebounceTime={700}\r\n          onNewImageDebounced={({ currentImageIdIndex }) => {\r\n            viewportGridService.setDisplaysetForViewport({\r\n              viewportIndex: activeViewportIndex,\r\n              displaySetInstanceUID: displaySet.displaySetInstanceUID,\r\n              imageIndex: currentImageIdIndex,\r\n            });\r\n          }}\r\n          // Sync resize throttle w/ sidepanel animation duration to prevent\r\n          // seizure inducing strobe blinking effect\r\n          resizeRefreshRateMs={150}\r\n          // TODO: ViewportGrid Context?\r\n          isActive={true} // todo\r\n          isStackPrefetchEnabled={true} // todo\r\n          isPlaying={false}\r\n          frameRate={24}\r\n          isOverlayVisible={true}\r\n          loadingIndicatorComponent={ViewportLoadingIndicator}\r\n          viewportOverlayComponent={props => {\r\n            return (\r\n              <ViewportOverlay\r\n                {...props}\r\n                activeTools={ToolBarService.getActiveTools()}\r\n              />\r\n            );\r\n          }}\r\n        />\r\n        <div className=\"absolute w-full\">\r\n          {viewportDialogState.viewportIndex === viewportIndex && (\r\n            <Notification\r\n              message={viewportDialogState.message}\r\n              type={viewportDialogState.type}\r\n              actions={viewportDialogState.actions}\r\n              onSubmit={viewportDialogState.onSubmit}\r\n              onOutsideClick={viewportDialogState.onOutsideClick}\r\n            />\r\n          )}\r\n        </div>\r\n        {childrenWithProps}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nTrackedCornerstoneViewport.propTypes = {\r\n  displaySet: PropTypes.object.isRequired,\r\n  viewportIndex: PropTypes.number.isRequired,\r\n  dataSource: PropTypes.object,\r\n  children: PropTypes.node,\r\n  customProps: PropTypes.object,\r\n};\r\n\r\nTrackedCornerstoneViewport.defaultProps = {\r\n  customProps: {},\r\n};\r\n\r\nconst _viewportLabels = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];\r\n\r\n/**\r\n * Obtain the CornerstoneTools Stack for the specified display set.\r\n *\r\n * @param {Object} displaySet\r\n * @param {Object} dataSource\r\n * @return {Object} CornerstoneTools Stack\r\n */\r\nfunction _getCornerstoneStack(displaySet, dataSource) {\r\n  const { imageIndex } = displaySet;\r\n\r\n  // Get stack from Stack Manager\r\n  const storedStack = StackManager.findOrCreateStack(displaySet, dataSource);\r\n\r\n  // Clone the stack here so we don't mutate it\r\n  const stack = Object.assign({}, storedStack);\r\n\r\n  stack.currentImageIdIndex = imageIndex;\r\n\r\n  return stack;\r\n}\r\n\r\nfunction _onDoubleClick() {\r\n  const cancelActiveManipulatorsForElement = cornerstoneTools.getModule(\r\n    'manipulatorState'\r\n  ).setters.cancelActiveManipulatorsForElement;\r\n  const enabledElements = cornerstoneTools.store.state.enabledElements;\r\n  enabledElements.forEach(element => {\r\n    cancelActiveManipulatorsForElement(element);\r\n  });\r\n}\r\n\r\n/**\r\n * Builds the viewport data from a datasource and a displayset.\r\n *\r\n * @param {Object} dataSource\r\n * @param {Object} displaySet\r\n * @return {Object} viewport data\r\n */\r\n\r\nasync function _getViewportData(dataSource, displaySet) {\r\n  const stack = _getCornerstoneStack(displaySet, dataSource);\r\n\r\n  const viewportData = {\r\n    StudyInstanceUID: displaySet.StudyInstanceUID,\r\n    displaySetInstanceUID: displaySet.displaySetInstanceUID,\r\n    stack,\r\n  };\r\n\r\n  return viewportData;\r\n}\r\n\r\nfunction _getNextMeasurementId(\r\n  direction,\r\n  servicesManager,\r\n  trackedMeasurementId,\r\n  trackedMeasurements\r\n) {\r\n  const { MeasurementService } = servicesManager.services;\r\n  const measurements = MeasurementService.getMeasurements();\r\n\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n\r\n  // Get the potentially trackable measurements for this series,\r\n  // The measurements to jump between are the same\r\n  // regardless if this series is tracked or not.\r\n\r\n  const filteredMeasurements = measurements.filter(m =>\r\n    trackedSeries.includes(m.referenceSeriesUID)\r\n  );\r\n\r\n  if (!filteredMeasurements.length) {\r\n    // No measurements on this series.\r\n    return;\r\n  }\r\n\r\n  const measurementCount = filteredMeasurements.length;\r\n\r\n  const ids = filteredMeasurements.map(fm => fm.id);\r\n  let measurementIndex = ids.findIndex(id => id === trackedMeasurementId);\r\n\r\n  if (measurementIndex === -1) {\r\n    // Not tracking a measurement, or previous measurement now deleted, revert to 0.\r\n    measurementIndex = 0;\r\n  } else {\r\n    if (direction === 'left') {\r\n      measurementIndex--;\r\n\r\n      if (measurementIndex < 0) {\r\n        measurementIndex = measurementCount - 1;\r\n      }\r\n    } else if (direction === 'right') {\r\n      measurementIndex++;\r\n\r\n      if (measurementIndex === measurementCount) {\r\n        measurementIndex = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  const newTrackedMeasurementId = ids[measurementIndex];\r\n\r\n  return newTrackedMeasurementId;\r\n}\r\n\r\nfunction _getViewportDataFromTrackedMeasurementId(\r\n  measurement,\r\n  DisplaySetService\r\n) {\r\n  const { referenceSeriesUID: SeriesInstanceUID, SOPInstanceUID } = measurement;\r\n\r\n  const activeDisplaySets = DisplaySetService.getActiveDisplaySets();\r\n\r\n  const displaySet = activeDisplaySets.find(\r\n    ds => ds.SeriesInstanceUID === SeriesInstanceUID\r\n  );\r\n\r\n  const imageIndex = displaySet.images.findIndex(\r\n    image => image.SOPInstanceUID === SOPInstanceUID\r\n  );\r\n\r\n  return {\r\n    imageIndex,\r\n    displaySetInstanceUID: displaySet.displaySetInstanceUID,\r\n  };\r\n}\r\n\r\nexport default TrackedCornerstoneViewport;\r\n"],"sourceRoot":""}